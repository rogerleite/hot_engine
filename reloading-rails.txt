INSTALL ENGINES

# Bundler to manage dependencies
_bundle_command = Gem.bin_path('bundler', 'bundle')

require 'bundler'
Bundler.with_clean_env do
  print `"#{Gem.ruby}" "#{_bundle_command}" #{command}`
end

# Steps for engines with migrations
$ rake blorgh:install:migrations # copy migrations from engine to app folder
$ rake db:migrate

REMOVE ENGINE

TODO

START ENGINE

Figure out how to simulate Rails boot on engine.
Save engine namespace somewhere. This is necessary to stop engine action.
Reload everything.

# railsties/lib/rails/application.rb:301
app.reload_dependencies? # => true (reloaders.map(&:updated?).any?)

# app.reloaders
# i18n
# routes reloader
# clear dependencies (if config.reload_classes_only_on_change)
#  ActiveSupport::Dependencies.mechanism = config.cache_classes ? :require : :load

# Rails console "reload command"
ActionDispatch::Reloader.cleanup!
ActionDispatch::Reloader.prepare!

# Alert about config/initializers

STOP ENGINE

Remove engine constant, like clear dependencies do.
Reload everything, 18n, routes, dependencies.
(TODO: Think on smart reloader, based on engine files)

UPDATE ENGINE

Check for new version.
Stop, Update and Start.

TODO:
 * automount of isolated engines
